/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_SCIPJNIJNI = NULL;
    jmethodID director_method_ids[5];
  }
}

   #include "scip/scip.h"
   #include "scip/scipdefplugins.h"
   #include "objscip/objmessagehdlr.h"

   /* if libscip is a shared library, ensure we use function calls instead of
      macros, for better binary compatibility across SCIP versions */
   #ifndef HAVE_STATIC_LIBSCIP
   #ifdef SCIPinfinity
   #undef SCIPinfinity
   #endif

   #ifdef BMScheckEmptyMemory
   #undef BMScheckEmptyMemory
   #endif
   #define BMScheckEmptyMemory() BMScheckEmptyMemory_call()

   #ifdef BMSgetMemoryUsed
   #undef BMSgetMemoryUsed
   #endif
   #define BMSgetMemoryUsed() BMSgetMemoryUsed_call()

   #ifdef SCIPvarGetName
   #undef SCIPvarGetName
   #endif

   #ifdef SCIPvarGetType
   #undef SCIPvarGetType
   #endif

   #ifdef SCIPvarGetLbLocal
   #undef SCIPvarGetLbLocal
   #endif

   #ifdef SCIPvarGetUbLocal
   #undef SCIPvarGetUbLocal
   #endif

   #ifdef SCIPvarGetLbGlobal
   #undef SCIPvarGetLbGlobal
   #endif

   #ifdef SCIPvarGetUbGlobal
   #undef SCIPvarGetUbGlobal
   #endif

   #ifdef SCIPvarGetObj
   #undef SCIPvarGetObj
   #endif

   #ifdef SCIPvarGetBranchPriority
   #undef SCIPvarGetBranchPriority
   #endif

   #ifdef SCIPsolGetDepth
   #undef SCIPsolGetDepth
   #endif

   #ifdef SCIPsolGetIndex
   #undef SCIPsolGetIndex
   #endif

   #ifdef SCIPconsGetName
   #undef SCIPconsGetName
   #endif
   #endif /* ndef HAVE_STATIC_LIBSCIP */

   /* assist function to create a SCIP */
   SCIP* createSCIP()
   {
      SCIP* scip;

      SCIP_CALL_ABORT( SCIPcreate(&scip) );

      return scip;
   }

   /* assist function to free a SCIP */
   void freeSCIP(SCIP* scip)
   {
      SCIP_CALL_ABORT( SCIPfree(&scip) );
   }

   /* assist function to create a variable */
   SCIP_VAR* createVar(SCIP* scip, const char* name, SCIP_Real lb, SCIP_Real ub, SCIP_Real obj, SCIP_VARTYPE vartype)
   {
      SCIP_VAR* var;

      SCIP_CALL_ABORT( SCIPcreateVarBasic(scip, &var, name, lb, ub, obj, vartype) );
      return var;
   }

   /* assist function to free a variable */
   void releaseVar(SCIP* scip, SCIP_VAR* var)
   {
      SCIP_CALL_ABORT( SCIPreleaseVar(scip, &var) );
   }

   /* assist function to create an abs expression */
   SCIP_EXPR* createExprAbs(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprAbs(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create an entropy expression */
   SCIP_EXPR* createExprEntropy(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprEntropy(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create an exp expression */
   SCIP_EXPR* createExprExp(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprExp(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create a log (ln) expression */
   SCIP_EXPR* createExprLog(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprLog(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create a pow expression */
   SCIP_EXPR* createExprPow(SCIP* scip, SCIP_EXPR* child, SCIP_Real exponent)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprPow(scip, &expr, child, exponent, NULL, NULL) );
      return expr;
   }

   /* assist function to create a signpower expression */
   SCIP_EXPR* createExprSignpower(SCIP* scip, SCIP_EXPR* child, SCIP_Real exponent)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprSignpower(scip, &expr, child, exponent, NULL, NULL) );
      return expr;
   }

   /* assist function to create a product expression */
   SCIP_EXPR* createExprProduct(SCIP* scip, int nchildren, SCIP_EXPR** children, SCIP_Real coefficient)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprProduct(scip, &expr, nchildren, children, coefficient, NULL, NULL) );
      return expr;
   }

   /* assist function to create a sum expression */
   SCIP_EXPR* createExprSum(SCIP* scip, int nchildren, SCIP_EXPR** children, SCIP_Real* coefficients, SCIP_Real constant)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprSum(scip, &expr, nchildren, children, coefficients, constant, NULL, NULL) );
      return expr;
   }

   /* assist function to create a sin expression */
   SCIP_EXPR* createExprSin(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprSin(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create a cos expression */
   SCIP_EXPR* createExprCos(SCIP* scip, SCIP_EXPR* child)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprCos(scip, &expr, child, NULL, NULL) );
      return expr;
   }

   /* assist function to create a (constant) value expression */
   SCIP_EXPR* createExprValue(SCIP* scip, SCIP_Real value)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprValue(scip, &expr, value, NULL, NULL) );
      return expr;
   }

   /* assist function to create a var(iable) expression */
   SCIP_EXPR* createExprVar(SCIP* scip, SCIP_VAR *var)
   {
      SCIP_EXPR* expr;

      SCIP_CALL_ABORT( SCIPcreateExprVar(scip, &expr, var, NULL, NULL) );
      return expr;
   }

   /* assist function to release an expression */
   void releaseExpr(SCIP* scip, SCIP_EXPR* expr)
   {
      SCIP_CALL_ABORT( SCIPreleaseExpr(scip, &expr) );
   }

   /* assist function to create a linear constraint */
   SCIP_CONS* createConsBasicLinear(SCIP* scip, const char* name , int nvars, SCIP_VAR** vars, SCIP_Real* vals, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicLinear(scip, &cons, name, nvars, vars, vals, lhs, rhs) );

      return cons;
   }

   /* assist function to create a quadratic constraint */
   SCIP_CONS* createConsBasicQuadratic(SCIP* scip, const char* name, int nlinvars, SCIP_VAR** linvars, SCIP_Real* lincoefs,\
      int nquadvars, SCIP_VAR** quadvars1, SCIP_VAR** quadvars2, SCIP_Real* quadcoefs, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicQuadraticNonlinear(scip, &cons, name, nlinvars, linvars, lincoefs, nquadvars, quadvars1, quadvars2, quadcoefs, lhs, rhs) );

      return cons;
   }

   /* assist function to create a superindicator constraint */
   SCIP_CONS* createConsBasicSuperindicator(SCIP *scip, const char *name, SCIP_VAR *binvar, SCIP_CONS *slackcons)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSuperindicator(scip, &cons, name, binvar, slackcons) );

      return cons;
   }

   /* assist function to create a nonlinear constraint */
   SCIP_CONS* createConsBasicNonlinear(SCIP* scip, const char* name, SCIP_EXPR* expr, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicNonlinear(scip, &cons, name, expr, lhs, rhs) );

      return cons;
   }

   /* assist function to create a pseudoboolean constraint */
   SCIP_CONS* createConsBasicPseudoboolean(SCIP* scip, const char* name, SCIP_VAR** linvars, int nlinvars, SCIP_Real* linvals, SCIP_VAR*** terms, int nterms, int* ntermvars, SCIP_Real* termvals, SCIP_VAR* indvar, SCIP_Real weight, SCIP_Bool issoftcons, SCIP_VAR* intvar, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

#if SCIP_VERSION_MAJOR < 10
      SCIP_CALL_ABORT( SCIPcreateConsBasicPseudoboolean(scip, &cons, name, linvars, nlinvars, linvals, terms, nterms, ntermvars, termvals, indvar, weight, issoftcons, intvar, lhs, rhs) );
#else
      assert(intvar == NULL);
      SCIP_CALL_ABORT( SCIPcreateConsBasicPseudoboolean(scip, &cons, name, linvars, nlinvars, linvals, terms, nterms, ntermvars, termvals, indvar, weight, issoftcons, lhs, rhs) );
#endif

      return cons;
   }

   /* assist function to create a set partitioning constraint */
   SCIP_CONS* createConsBasicSetpart(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSetpart(scip, &cons, name, nvars, vars) );

      return cons;
   }

   /* assist function to create a set packing constraint */
   SCIP_CONS* createConsBasicSetpack(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSetpack(scip, &cons, name, nvars, vars) );

      return cons;
   }

   /* assist function to create a set covering constraint */
   SCIP_CONS* createConsBasicSetcover(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSetcover(scip, &cons, name, nvars, vars) );

      return cons;
   }

   /* assist function to create a second-order cone constraint */
   SCIP_CONS* createConsBasicSOC(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_Real* coefs, SCIP_Real* offsets, SCIP_Real constant, SCIP_VAR* rhsvar, SCIP_Real rhscoeff, SCIP_Real rhsoffset)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSOCNonlinear(scip, &cons, name, nvars, vars, coefs, offsets, constant, rhsvar, rhscoeff, rhsoffset) );

      return cons;
   }

   /* assist function to create a signpower constraint */
   SCIP_CONS* createConsBasicSignpower(SCIP* scip, const char* name, SCIP_VAR* x, SCIP_VAR* z, SCIP_Real exponent, SCIP_Real xoffset, SCIP_Real zcoef, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSignpowerNonlinear(scip, &cons, name, x, z, exponent, xoffset, zcoef, lhs, rhs) );

      return cons;
   }

   /* assist function to create an and constraint */
   SCIP_CONS* createConsBasicAnd(SCIP* scip, const char* name, SCIP_VAR* resvar, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicAnd(scip, &cons, name, resvar, nvars, vars) );

      return cons;
   }

   /* assist function to create an or constraint */
   SCIP_CONS* createConsBasicOr(SCIP* scip, const char* name, SCIP_VAR* resvar, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicOr(scip, &cons, name, resvar, nvars, vars) );

      return cons;
   }

   /* assist function to create a bound disjunction constraint */
   SCIP_CONS* createConsBasicBounddisjunction(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_BOUNDTYPE* boundtypes, SCIP_Real* bounds)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicBounddisjunction(scip, &cons, name, nvars, vars, boundtypes, bounds) );

      return cons;
   }

   /* assist function to create a redundant bound disjunction constraint */
   SCIP_CONS* createConsBasicBounddisjunctionRedundant(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_BOUNDTYPE* boundtypes, SCIP_Real* bounds)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicBounddisjunctionRedundant(scip, &cons, name, nvars, vars, boundtypes, bounds) );

      return cons;
   }

   /* assist function to create a cardinality constraint */
   SCIP_CONS* createConsBasicCardinality(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, int cardval, SCIP_VAR** indvars, SCIP_Real* weights)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicCardinality(scip, &cons, name, nvars, vars, cardval, indvars, weights) );

      return cons;
   }

   /* assist function to create a conjunction constraint */
   SCIP_CONS* createConsBasicConjunction(SCIP* scip, const char* name, int nconss, SCIP_CONS** conss)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicConjunction(scip, &cons, name, nconss, conss) );

      return cons;
   }

   /* assist function to create a disjunction constraint */
   SCIP_CONS* createConsBasicDisjunction(SCIP* scip, const char* name, int nconss, SCIP_CONS** conss, SCIP_CONS* relaxcons)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicDisjunction(scip, &cons, name, nconss, conss, relaxcons) );

      return cons;
   }

   /* assist function to create a cumulative constraint */
   SCIP_CONS* createConsBasicCumulative(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, int* durations, int* demands, int capacity)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicCumulative(scip, &cons, name, nvars, vars, durations, demands, capacity) );

      return cons;
   }

   /* assist function to create an indicator constraint */
   SCIP_CONS* createConsBasicIndicator(SCIP* scip, const char* name, SCIP_VAR* binvar, int nvars, SCIP_VAR** vars, SCIP_Real* vals, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicIndicator(scip, &cons, name, binvar, nvars, vars, vals, rhs) );

      return cons;
   }

   /* assist function to create an indicator constraint with given linear
      constraint and slack variable*/
   SCIP_CONS* createConsBasicIndicatorLinCons(SCIP* scip, const char* name, SCIP_VAR* binvar, SCIP_CONS* lincons, SCIP_VAR* slackvar)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicIndicatorLinCons(scip, &cons, name, binvar, lincons, slackvar) );

      return cons;
   }

   /* assist function to create a knapsack constraint */
   SCIP_CONS* createConsBasicKnapsack(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_Longint* weights, SCIP_Longint capacity)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicKnapsack(scip, &cons, name, nvars, vars, weights, capacity) );

      return cons;
   }

   /* assist function to create a linking constraint */
   SCIP_CONS* createConsBasicLinking(SCIP* scip, const char* name, SCIP_VAR* linkvar, SCIP_VAR** binvars, SCIP_Real* vals, int nbinvars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicLinking(scip, &cons, name, linkvar, binvars, vals, nbinvars) );

      return cons;
   }

   /* assist function to create a logicor constraint */
   SCIP_CONS* createConsBasicLogicor(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicLogicor(scip, &cons, name, nvars, vars) );

      return cons;
   }

   /* assist function to create an orbisack constraint */
   SCIP_CONS* createConsBasicOrbisack(SCIP* scip, const char* name, SCIP_VAR** vars1, SCIP_VAR** vars2, int nrows, SCIP_Bool ispporbisack, SCIP_Bool isparttype, SCIP_Bool ismodelcons)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicOrbisack(scip, &cons, name, vars1, vars2, nrows, ispporbisack, isparttype, ismodelcons) );

      return cons;
   }

   /* assist function to create an orbitope constraint */
   SCIP_CONS* createConsBasicOrbitope(SCIP* scip, const char* name, SCIP_VAR*** vars, SCIP_ORBITOPETYPE orbitopetype, int nspcons, int nblocks, SCIP_Bool usedynamicprop, SCIP_Bool resolveprop, SCIP_Bool ismodelcons, SCIP_Bool mayinteract)
   {
      SCIP_CONS* cons;

#if SCIP_VERSION_MAJOR < 10
      SCIP_CALL_ABORT( SCIPcreateConsBasicOrbitope(scip, &cons, name, vars, orbitopetype, nspcons, nblocks, usedynamicprop, resolveprop, ismodelcons, mayinteract) );
#else
      SCIP_CALL_ABORT( SCIPcreateConsBasicOrbitope(scip, &cons, name, vars, orbitopetype, nspcons, nblocks, resolveprop, ismodelcons, FALSE) );
#endif

      return cons;
   }

   /* assist function to create an SOS1 constraint */
   SCIP_CONS* createConsBasicSOS1(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_Real* weights)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSOS1(scip, &cons, name, nvars, vars, weights) );

      return cons;
   }

   /* assist function to create an SOS2 constraint */
   SCIP_CONS* createConsBasicSOS2(SCIP* scip, const char* name, int nvars, SCIP_VAR** vars, SCIP_Real* weights)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSOS2(scip, &cons, name, nvars, vars, weights) );

      return cons;
   }

   /* assist function to create a symresack constraint */
   SCIP_CONS* createConsBasicSymresack(SCIP* scip, const char* name, int* perm, SCIP_VAR** vars, int nvars, SCIP_Bool ismodelcons)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicSymresack(scip, &cons, name, perm, vars, nvars, ismodelcons) );

      return cons;
   }

   /* assist function to create a variable bound constraint */
   SCIP_CONS* createConsBasicVarbound(SCIP* scip, const char* name, SCIP_VAR* var, SCIP_VAR* vbdvar, SCIP_Real vbdcoef, SCIP_Real lhs, SCIP_Real rhs)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicVarbound(scip, &cons, name, var, vbdvar, vbdcoef, lhs, rhs) );

      return cons;
   }

   /* assist function to create an xor constraint */
   SCIP_CONS* createConsBasicXor(SCIP* scip, const char* name, SCIP_Bool rhs, int nvars, SCIP_VAR** vars)
   {
      SCIP_CONS* cons;

      SCIP_CALL_ABORT( SCIPcreateConsBasicXor(scip, &cons, name, rhs, nvars, vars) );

      return cons;
   }

   /* assist function to release a constraint */
   void releaseCons(SCIP* scip, SCIP_CONS* cons)
   {
      SCIP_CALL_ABORT( SCIPreleaseCons(scip, &cons) );
   }

   /* assist function to create a message handler */
   SCIP_MESSAGEHDLR* createObjMessagehdlr(scip::ObjMessagehdlr* objmessagehdlr, SCIP_Bool deleteobject)
   {
      SCIP_MESSAGEHDLR* messagehdlr;

      SCIP_CALL_ABORT( SCIPcreateObjMessagehdlr(&messagehdlr, objmessagehdlr, deleteobject) );

      return messagehdlr;
   }


static char *new_char_array(int nelements) { 
  return new char[nelements](); 
}

static void delete_char_array(char *ary) { 
  delete [] ary; 
}

static char char_array_getitem(char *ary, int index) {
    return ary[index];
}
static void char_array_setitem(char *ary, int index, char value) {
    ary[index] = value;
}


static double *new_double_array(int nelements) { 
  return new double[nelements](); 
}

static void delete_double_array(double *ary) { 
  delete [] ary; 
}

static double double_array_getitem(double *ary, int index) {
    return ary[index];
}
static void double_array_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static int *new_int_array(int nelements) { 
  return new int[nelements](); 
}

static void delete_int_array(int *ary) { 
  delete [] ary; 
}

static int int_array_getitem(int *ary, int index) {
    return ary[index];
}
static void int_array_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


static long long *new_long_long_array(int nelements) { 
  return new long long[nelements](); 
}

static void delete_long_long_array(long long *ary) { 
  delete [] ary; 
}

static long long long_long_array_getitem(long long *ary, int index) {
    return ary[index];
}
static void long_long_array_setitem(long long *ary, int index, long long value) {
    ary[index] = value;
}


static unsigned int *new_unsigned_int_array(int nelements) { 
  return new unsigned int[nelements](); 
}

static void delete_unsigned_int_array(unsigned int *ary) { 
  delete [] ary; 
}

static unsigned int unsigned_int_array_getitem(unsigned int *ary, int index) {
    return ary[index];
}
static void unsigned_int_array_setitem(unsigned int *ary, int index, unsigned int value) {
    ary[index] = value;
}


static SCIP_BOUNDTYPE *new_SCIP_BoundType_array(int nelements) { 
  return new SCIP_BOUNDTYPE[nelements](); 
}

static void delete_SCIP_BoundType_array(SCIP_BOUNDTYPE *ary) { 
  delete [] ary; 
}

static SCIP_BOUNDTYPE SCIP_BoundType_array_getitem(SCIP_BOUNDTYPE *ary, int index) {
    return ary[index];
}
static void SCIP_BoundType_array_setitem(SCIP_BOUNDTYPE *ary, int index, SCIP_BOUNDTYPE value) {
    ary[index] = value;
}


static char* *new_String_array(int nelements) { 
  return new char*[nelements](); 
}

static void delete_String_array(char* *ary) { 
  delete [] ary; 
}

static char* String_array_getitem(char* *ary, int index) {
    return ary[index];
}
static void String_array_setitem(char* *ary, int index, char* value) {
    ary[index] = value;
}


static SCIP_VAR* *new_SCIP_VAR_array(int nelements) { 
  return new SCIP_VAR*[nelements](); 
}

static void delete_SCIP_VAR_array(SCIP_VAR* *ary) { 
  delete [] ary; 
}

static SCIP_VAR* SCIP_VAR_array_getitem(SCIP_VAR* *ary, int index) {
    return ary[index];
}
static void SCIP_VAR_array_setitem(SCIP_VAR* *ary, int index, SCIP_VAR* value) {
    ary[index] = value;
}


static SCIP_EXPR* *new_SCIP_EXPR_array(int nelements) { 
  return new SCIP_EXPR*[nelements](); 
}

static void delete_SCIP_EXPR_array(SCIP_EXPR* *ary) { 
  delete [] ary; 
}

static SCIP_EXPR* SCIP_EXPR_array_getitem(SCIP_EXPR* *ary, int index) {
    return ary[index];
}
static void SCIP_EXPR_array_setitem(SCIP_EXPR* *ary, int index, SCIP_EXPR* value) {
    ary[index] = value;
}


static SCIP_CONS* *new_SCIP_CONS_array(int nelements) { 
  return new SCIP_CONS*[nelements](); 
}

static void delete_SCIP_CONS_array(SCIP_CONS* *ary) { 
  delete [] ary; 
}

static SCIP_CONS* SCIP_CONS_array_getitem(SCIP_CONS* *ary, int index) {
    return ary[index];
}
static void SCIP_CONS_array_setitem(SCIP_CONS* *ary, int index, SCIP_CONS* value) {
    ary[index] = value;
}


static SCIP_SOL* *new_SCIP_SOL_array(int nelements) { 
  return new SCIP_SOL*[nelements](); 
}

static void delete_SCIP_SOL_array(SCIP_SOL* *ary) { 
  delete [] ary; 
}

static SCIP_SOL* SCIP_SOL_array_getitem(SCIP_SOL* *ary, int index) {
    return ary[index];
}
static void SCIP_SOL_array_setitem(SCIP_SOL* *ary, int index, SCIP_SOL* value) {
    ary[index] = value;
}


static SCIP_VAR** *new_SCIP_VAR_array_array(int nelements) { 
  return new SCIP_VAR**[nelements](); 
}

static void delete_SCIP_VAR_array_array(SCIP_VAR** *ary) { 
  delete [] ary; 
}

static SCIP_VAR** SCIP_VAR_array_array_getitem(SCIP_VAR** *ary, int index) {
    return ary[index];
}
static void SCIP_VAR_array_array_setitem(SCIP_VAR** *ary, int index, SCIP_VAR** value) {
    ary[index] = value;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "scipjni_wrap.h"

SwigDirector_ObjMessagehdlr::SwigDirector_ObjMessagehdlr(JNIEnv *jenv, unsigned int bufferedoutput) : scip::ObjMessagehdlr(bufferedoutput), Swig::Director(jenv) {
}

SwigDirector_ObjMessagehdlr::~SwigDirector_ObjMessagehdlr() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ObjMessagehdlr::scip_error(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, char const *msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessagehdlr = 0 ;
  jlong jfile = 0 ;
  jstring jmsg = 0 ;
  
  if (!swig_override[0]) {
    scip::ObjMessagehdlr::scip_error(messagehdlr,file,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SCIP_MESSAGEHDLR **)&jmessagehdlr) = (SCIP_MESSAGEHDLR *) messagehdlr; 
    *((FILE **)&jfile) = (FILE *) file; 
    jmsg = 0;
    if (msg) {
      jmsg = jenv->NewStringUTF((const char *)msg);
      if (!jmsg) return ;
    }
    Swig::LocalRefGuard msg_refguard(jenv, jmsg);
    jenv->CallStaticVoidMethod(Swig::jclass_SCIPJNIJNI, Swig::director_method_ids[0], swigjobj, jmessagehdlr, jfile, jmsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in scip::ObjMessagehdlr::scip_error ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjMessagehdlr::scip_warning(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, char const *msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessagehdlr = 0 ;
  jlong jfile = 0 ;
  jstring jmsg = 0 ;
  
  if (!swig_override[1]) {
    scip::ObjMessagehdlr::scip_warning(messagehdlr,file,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SCIP_MESSAGEHDLR **)&jmessagehdlr) = (SCIP_MESSAGEHDLR *) messagehdlr; 
    *((FILE **)&jfile) = (FILE *) file; 
    jmsg = 0;
    if (msg) {
      jmsg = jenv->NewStringUTF((const char *)msg);
      if (!jmsg) return ;
    }
    Swig::LocalRefGuard msg_refguard(jenv, jmsg);
    jenv->CallStaticVoidMethod(Swig::jclass_SCIPJNIJNI, Swig::director_method_ids[1], swigjobj, jmessagehdlr, jfile, jmsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in scip::ObjMessagehdlr::scip_warning ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjMessagehdlr::scip_dialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, char const *msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessagehdlr = 0 ;
  jlong jfile = 0 ;
  jstring jmsg = 0 ;
  
  if (!swig_override[2]) {
    scip::ObjMessagehdlr::scip_dialog(messagehdlr,file,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SCIP_MESSAGEHDLR **)&jmessagehdlr) = (SCIP_MESSAGEHDLR *) messagehdlr; 
    *((FILE **)&jfile) = (FILE *) file; 
    jmsg = 0;
    if (msg) {
      jmsg = jenv->NewStringUTF((const char *)msg);
      if (!jmsg) return ;
    }
    Swig::LocalRefGuard msg_refguard(jenv, jmsg);
    jenv->CallStaticVoidMethod(Swig::jclass_SCIPJNIJNI, Swig::director_method_ids[2], swigjobj, jmessagehdlr, jfile, jmsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in scip::ObjMessagehdlr::scip_dialog ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ObjMessagehdlr::scip_info(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, char const *msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessagehdlr = 0 ;
  jlong jfile = 0 ;
  jstring jmsg = 0 ;
  
  if (!swig_override[3]) {
    scip::ObjMessagehdlr::scip_info(messagehdlr,file,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SCIP_MESSAGEHDLR **)&jmessagehdlr) = (SCIP_MESSAGEHDLR *) messagehdlr; 
    *((FILE **)&jfile) = (FILE *) file; 
    jmsg = 0;
    if (msg) {
      jmsg = jenv->NewStringUTF((const char *)msg);
      if (!jmsg) return ;
    }
    Swig::LocalRefGuard msg_refguard(jenv, jmsg);
    jenv->CallStaticVoidMethod(Swig::jclass_SCIPJNIJNI, Swig::director_method_ids[3], swigjobj, jmessagehdlr, jfile, jmsg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in scip::ObjMessagehdlr::scip_info ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SCIP_RETCODE SwigDirector_ObjMessagehdlr::scip_free(SCIP_MESSAGEHDLR *messagehdlr) {
  SCIP_RETCODE c_result = SwigValueInit< SCIP_RETCODE >() ;
  jint jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmessagehdlr = 0 ;
  
  if (!swig_override[4]) {
    return scip::ObjMessagehdlr::scip_free(messagehdlr);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((SCIP_MESSAGEHDLR **)&jmessagehdlr) = (SCIP_MESSAGEHDLR *) messagehdlr; 
    jresult = (jint) jenv->CallStaticIntMethod(Swig::jclass_SCIPJNIJNI, Swig::director_method_ids[4], swigjobj, jmessagehdlr);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (SCIP_RETCODE)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in scip::ObjMessagehdlr::scip_free ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ObjMessagehdlr::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "scip_error", "(Ljscip/SWIGTYPE_p_SCIP_Messagehdlr;Ljscip/SWIGTYPE_p_FILE;Ljava/lang/String;)V", NULL 
    },
    {
      "scip_warning", "(Ljscip/SWIGTYPE_p_SCIP_Messagehdlr;Ljscip/SWIGTYPE_p_FILE;Ljava/lang/String;)V", NULL 
    },
    {
      "scip_dialog", "(Ljscip/SWIGTYPE_p_SCIP_Messagehdlr;Ljscip/SWIGTYPE_p_FILE;Ljava/lang/String;)V", NULL 
    },
    {
      "scip_info", "(Ljscip/SWIGTYPE_p_SCIP_Messagehdlr;Ljscip/SWIGTYPE_p_FILE;Ljava/lang/String;)V", NULL 
    },
    {
      "scip_free", "(Ljscip/SWIGTYPE_p_SCIP_Messagehdlr;)Ljscip/SCIP_Retcode;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("jscip/ObjMessagehdlr");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1char_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char *)new_char_array(arg1);
  *(char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1char_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1; 
  delete_char_array(arg1);
  
}


SWIGEXPORT jchar JNICALL Java_jscip_SCIPJNIJNI_char_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jchar jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)char_array_getitem(arg1,arg2);
  jresult = (jchar)result; 
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_char_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jchar jarg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  char_array_setitem(arg1,arg2,arg3);
  
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1double_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double *)new_double_array(arg1);
  *(double **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1double_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  double *arg1 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  delete_double_array(arg1);
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_double_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jdouble jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)double_array_getitem(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_double_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jdouble jarg3) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(double **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  double_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int *)new_int_array(arg1);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int *arg1 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  delete_int_array(arg1);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)int_array_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1long_1long_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  long long *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (long long *)new_long_long_array(arg1);
  *(long long **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1long_1long_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  long long *arg1 = (long long *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  delete_long_long_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_long_1long_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  long long *arg1 = (long long *) 0 ;
  int arg2 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (long long)long_long_array_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_long_1long_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  long long *arg1 = (long long *) 0 ;
  int arg2 ;
  long long arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(long long **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (long long)jarg3; 
  long_long_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1unsigned_1int_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  unsigned int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (unsigned int *)new_unsigned_int_array(arg1);
  *(unsigned int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1unsigned_1int_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  delete_unsigned_int_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_unsigned_1int_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  unsigned int *arg1 = (unsigned int *) 0 ;
  int arg2 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)unsigned_int_array_getitem(arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_unsigned_1int_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  unsigned int *arg1 = (unsigned int *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned int **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  unsigned_int_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1BoundType_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_BOUNDTYPE *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_BOUNDTYPE *)new_SCIP_BoundType_array(arg1);
  *(SCIP_BOUNDTYPE **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1BoundType_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_BOUNDTYPE *arg1 = (SCIP_BOUNDTYPE *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_BOUNDTYPE **)&jarg1; 
  delete_SCIP_BoundType_array(arg1);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BoundType_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  SCIP_BOUNDTYPE *arg1 = (SCIP_BOUNDTYPE *) 0 ;
  int arg2 ;
  SCIP_BOUNDTYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_BOUNDTYPE **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_BOUNDTYPE)SCIP_BoundType_array_getitem(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BoundType_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3) {
  SCIP_BOUNDTYPE *arg1 = (SCIP_BOUNDTYPE *) 0 ;
  int arg2 ;
  SCIP_BOUNDTYPE arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_BOUNDTYPE **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SCIP_BOUNDTYPE)jarg3; 
  SCIP_BoundType_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1String_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (char **)new_String_array(arg1);
  *(char ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1String_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  char **arg1 = (char **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  delete_String_array(arg1);
}


SWIGEXPORT jstring JNICALL Java_jscip_SCIPJNIJNI_String_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jstring jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)String_array_getitem(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_String_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jstring jarg3) {
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(char ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  String_array_setitem(arg1,arg2,arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1VAR_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_VAR **)new_SCIP_VAR_array(arg1);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1VAR_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  delete_SCIP_VAR_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  int arg2 ;
  SCIP_VAR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_VAR *)SCIP_VAR_array_getitem(arg1,arg2);
  *(SCIP_VAR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_VAR **arg1 = (SCIP_VAR **) 0 ;
  int arg2 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  SCIP_VAR_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1EXPR_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_EXPR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_EXPR **)new_SCIP_EXPR_array(arg1);
  *(SCIP_EXPR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1EXPR_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_EXPR **arg1 = (SCIP_EXPR **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_EXPR ***)&jarg1; 
  delete_SCIP_EXPR_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1EXPR_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_EXPR **arg1 = (SCIP_EXPR **) 0 ;
  int arg2 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_EXPR ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_EXPR *)SCIP_EXPR_array_getitem(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1EXPR_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_EXPR **arg1 = (SCIP_EXPR **) 0 ;
  int arg2 ;
  SCIP_EXPR *arg3 = (SCIP_EXPR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_EXPR ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_EXPR **)&jarg3; 
  SCIP_EXPR_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1CONS_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_CONS **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_CONS **)new_SCIP_CONS_array(arg1);
  *(SCIP_CONS ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1CONS_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_CONS **arg1 = (SCIP_CONS **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_CONS ***)&jarg1; 
  delete_SCIP_CONS_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1CONS_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_CONS **arg1 = (SCIP_CONS **) 0 ;
  int arg2 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_CONS ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_CONS *)SCIP_CONS_array_getitem(arg1,arg2);
  *(SCIP_CONS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1CONS_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_CONS **arg1 = (SCIP_CONS **) 0 ;
  int arg2 ;
  SCIP_CONS *arg3 = (SCIP_CONS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_CONS ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_CONS **)&jarg3; 
  SCIP_CONS_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1SOL_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_SOL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_SOL **)new_SCIP_SOL_array(arg1);
  *(SCIP_SOL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1SOL_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  delete_SCIP_SOL_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1SOL_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  int arg2 ;
  SCIP_SOL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_SOL *)SCIP_SOL_array_getitem(arg1,arg2);
  *(SCIP_SOL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1SOL_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_SOL **arg1 = (SCIP_SOL **) 0 ;
  int arg2 ;
  SCIP_SOL *arg3 = (SCIP_SOL *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL ***)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_SOL **)&jarg3; 
  SCIP_SOL_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1SCIP_1VAR_1array_1array(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  SCIP_VAR ***result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (SCIP_VAR ***)new_SCIP_VAR_array_array(arg1);
  *(SCIP_VAR ****)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1SCIP_1VAR_1array_1array(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_VAR ***arg1 = (SCIP_VAR ***) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ****)&jarg1; 
  delete_SCIP_VAR_array_array(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1array_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  SCIP_VAR ***arg1 = (SCIP_VAR ***) 0 ;
  int arg2 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ****)&jarg1; 
  arg2 = (int)jarg2; 
  result = (SCIP_VAR **)SCIP_VAR_array_array_getitem(arg1,arg2);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VAR_1array_1array_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  SCIP_VAR ***arg1 = (SCIP_VAR ***) 0 ;
  int arg2 ;
  SCIP_VAR **arg3 = (SCIP_VAR **) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR ****)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_VAR ***)&jarg3; 
  SCIP_VAR_array_array_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OKAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_OKAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOMEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOMEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1READERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_READERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1WRITEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_WRITEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOFILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOFILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1FILECREATEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_FILECREATEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1LPERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_LPERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1NOPROBLEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_NOPROBLEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDCALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDCALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDDATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDDATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1INVALIDRESULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_INVALIDRESULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PLUGINNOTFOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PLUGINNOTFOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERUNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERUNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERWRONGTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERWRONGTYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMETERWRONGVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_PARAMETERWRONGVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1KEYALREADYEXISTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_KEYALREADYEXISTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1MAXDEPTHLEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_MAXDEPTHLEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BRANCHERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Retcode result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Retcode)SCIP_BRANCHERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1BINARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_BINARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1INTEGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_INTEGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1IMPLINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_IMPLINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VARTYPE_1CONTINUOUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Vartype result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Vartype)SCIP_VARTYPE_CONTINUOUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BOUNDTYPE_1LOWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_BoundType result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_BoundType)SCIP_BOUNDTYPE_LOWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1BOUNDTYPE_1UPPER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_BoundType result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_BoundType)SCIP_BOUNDTYPE_UPPER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1ORBITOPETYPE_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_OrbitopeType result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_OrbitopeType)SCIP_ORBITOPETYPE_FULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1ORBITOPETYPE_1PARTITIONING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_OrbitopeType result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_OrbitopeType)SCIP_ORBITOPETYPE_PARTITIONING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1ORBITOPETYPE_1PACKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_OrbitopeType result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_OrbitopeType)SCIP_ORBITOPETYPE_PACKING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMSETTING_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamSetting result;

  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamSetting)SCIP_PARAMSETTING_DEFAULT;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMSETTING_1AGGRESSIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamSetting result;

  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamSetting)SCIP_PARAMSETTING_AGGRESSIVE;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMSETTING_1FAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamSetting result;

  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamSetting)SCIP_PARAMSETTING_FAST;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMSETTING_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamSetting result;

  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamSetting)SCIP_PARAMSETTING_OFF;
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1DEFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_DEFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1CPSOLVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_CPSOLVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1EASYCIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_EASYCIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1FEASIBILITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_FEASIBILITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1HARDLP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_HARDLP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1OPTIMALITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_OPTIMALITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1COUNTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_COUNTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEFEAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEFEAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEIMPROVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEIMPROVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1PARAMEMPHASIS_1PHASEPROOF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_ParamEmphasis result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_ParamEmphasis)SCIP_PARAMEMPHASIS_PHASEPROOF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1DIALOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_DIALOG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1MINIMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_MINIMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1VERBLEVEL_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_VerbLevel result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_VerbLevel)SCIP_VERBLEVEL_FULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OBJSENSE_1MAXIMIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Objsense result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Objsense)SCIP_OBJSENSE_MAXIMIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1OBJSENSE_1MINIMIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Objsense result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Objsense)SCIP_OBJSENSE_MINIMIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1USERINTERRUPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_USERINTERRUPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1NODELIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_NODELIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1TOTALNODELIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_TOTALNODELIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1STALLNODELIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_STALLNODELIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1TIMELIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_TIMELIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1MEMLIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_MEMLIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1GAPLIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_GAPLIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1SOLLIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_SOLLIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1BESTSOLLIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_BESTSOLLIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1RESTARTLIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_RESTARTLIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1OPTIMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_OPTIMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1INFEASIBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_INFEASIBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1UNBOUNDED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_UNBOUNDED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1INFORUNBD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_INFORUNBD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STATUS_1TERMINATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Status result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Status)SCIP_STATUS_TERMINATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1PROBLEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_PROBLEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1TRANSFORMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_TRANSFORMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1TRANSFORMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_TRANSFORMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1INITPRESOLVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_INITPRESOLVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1PRESOLVING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_PRESOLVING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1EXITPRESOLVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_EXITPRESOLVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1PRESOLVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_PRESOLVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1INITSOLVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_INITSOLVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1SOLVING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_SOLVING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1SOLVED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_SOLVED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1EXITSOLVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_EXITSOLVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1FREETRANS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_FREETRANS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIP_1STAGE_1FREE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SCIP_Stage result;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP_Stage)SCIP_STAGE_FREE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPcalcMachineEpsilon(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)SCIPcalcMachineEpsilon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP **arg1 = (SCIP **) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP ***)&jarg1; 
  result = (SCIP_RETCODE)SCIPcreate(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPreadProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (SCIP_RETCODE)SCIPreadProb(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPreadParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (SCIP_RETCODE)SCIPreadParams(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreateProbBasic(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (SCIP_RETCODE)SCIPcreateProbBasic(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPincludeDefaultPlugins(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPincludeDefaultPlugins(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPsolve(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolveConcurrent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPsolveConcurrent(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPinterruptSolve(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_RETCODE)SCIPinterruptSolve(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPisSolveInterrupted(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (unsigned int)SCIPisSolveInterrupted(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  result = (SCIP_RETCODE)SCIPaddVar(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetNVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (int)SCIPgetNVars(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_VAR **)SCIPgetVars(arg1);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetNOrigVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (int)SCIPgetNOrigVars(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetOrigVars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_VAR **)SCIPgetOrigVars(arg1);
  *(SCIP_VAR ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddCons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_CONS **)&jarg2; 
  result = (SCIP_RETCODE)SCIPaddCons(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPwriteOrigProblem(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  result = (SCIP_RETCODE)SCIPwriteOrigProblem(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPwriteTransProblem(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (unsigned int)jarg4; 
  result = (SCIP_RETCODE)SCIPwriteTransProblem(arg1,(char const *)arg2,(char const *)arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPprintStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  result = (SCIP_RETCODE)SCIPprintStatistics(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPprintBestSol(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(FILE **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPprintBestSol(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIPsetMessagehdlrQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  SCIPsetMessagehdlrQuiet(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_STATUS result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_STATUS)SCIPgetStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetStage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_STAGE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_STAGE)SCIPgetStage(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_SOL **)SCIPgetSols(arg1);
  *(SCIP_SOL ***)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetNSols(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (int)SCIPgetNSols(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetBestSol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_SOL *)SCIPgetBestSol(arg1);
  *(SCIP_SOL **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSolVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  result = (double)SCIPgetSolVal(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSolOrigObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  result = (double)SCIPgetSolOrigObj(arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPinfinity(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPinfinity(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPepsilon(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPepsilon(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPfeastol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPfeastol(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetBoolParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned int **)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetBoolParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetIntParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetIntParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetLongintParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  long long *arg3 = (long long *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(long long **)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetLongintParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetRealParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(double **)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetRealParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetCharParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char **)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetCharParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetStringParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(char ***)&jarg3; 
  result = (SCIP_RETCODE)SCIPgetStringParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetBoolParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetBoolParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetIntParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetIntParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetLongintParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  long long arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long long)jarg3; 
  result = (SCIP_RETCODE)SCIPsetLongintParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetRealParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (SCIP_RETCODE)SCIPsetRealParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetCharParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jchar jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  result = (SCIP_RETCODE)SCIPsetCharParam(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetStringParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (SCIP_RETCODE)SCIPsetStringParam(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetPresolving(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_PARAMSETTING arg2 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;

  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1;
  arg2 = (SCIP_PARAMSETTING)jarg2;
  arg3 = (unsigned int)jarg3;
  result = (SCIP_RETCODE)SCIPsetPresolving(arg1,arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetHeuristics(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_PARAMSETTING arg2 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;

  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1;
  arg2 = (SCIP_PARAMSETTING)jarg2;
  arg3 = (unsigned int)jarg3;
  result = (SCIP_RETCODE)SCIPsetHeuristics(arg1,arg2,arg3);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetEmphasis(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_PARAMEMPHASIS arg2 ;
  unsigned int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (SCIP_PARAMEMPHASIS)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (SCIP_RETCODE)SCIPsetEmphasis(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetObjsense(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_OBJSENSE arg2 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (SCIP_OBJSENSE)jarg2; 
  result = (SCIP_RETCODE)SCIPsetObjsense(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetObjsense(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_OBJSENSE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_OBJSENSE)SCIPgetObjsense(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetGap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPgetGap(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPchgVarObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  double arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (SCIP_RETCODE)SCIPchgVarObj(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPchgVarBranchPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  int arg3 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (SCIP_RETCODE)SCIPchgVarBranchPriority(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreateSol(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **arg2 = (SCIP_SOL **) 0 ;
  SCIP_HEUR *arg3 = (SCIP_HEUR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL ***)&jarg2; 
  arg3 = *(SCIP_HEUR **)&jarg3; 
  result = (SCIP_RETCODE)SCIPcreateSol(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPcreatePartialSol(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **arg2 = (SCIP_SOL **) 0 ;
  SCIP_HEUR *arg3 = (SCIP_HEUR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL ***)&jarg2; 
  arg3 = *(SCIP_HEUR **)&jarg3; 
  result = (SCIP_RETCODE)SCIPcreatePartialSol(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetSolVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jdouble jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  double arg4 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = (double)jarg4; 
  result = (SCIP_RETCODE)SCIPsetSolVal(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetSolVals(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL *arg2 = (SCIP_SOL *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (SCIP_RETCODE)SCIPsetSolVals(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPaddSolFree(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_SOL **arg2 = (SCIP_SOL **) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_SOL ***)&jarg2; 
  arg3 = *(unsigned int **)&jarg3; 
  result = (SCIP_RETCODE)SCIPaddSolFree(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetPrimalbound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPgetPrimalbound(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetDualbound(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPgetDualbound(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetSolvingTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (double)SCIPgetSolvingTime(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_BMScheckEmptyMemory(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  BMScheckEmptyMemory();
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_BMSgetMemoryUsed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  result = (long long)BMSgetMemoryUsed();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (char *)SCIPvarGetName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  SCIP_VARTYPE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (SCIP_VARTYPE)SCIPvarGetType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetLbLocal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetLbLocal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetUbLocal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetUbLocal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetLbGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetLbGlobal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetUbGlobal(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetUbGlobal(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jdouble jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (double)SCIPvarGetObj(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPvarGetBranchPriority(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_VAR *arg1 = (SCIP_VAR *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_VAR **)&jarg1; 
  result = (int)SCIPvarGetBranchPriority(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolGetDepth(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_SOL *arg1 = (SCIP_SOL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL **)&jarg1; 
  result = (int)SCIPsolGetDepth(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsolGetIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP_SOL *arg1 = (SCIP_SOL *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_SOL **)&jarg1; 
  result = (int)SCIPsolGetIndex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_jscip_SCIPJNIJNI_SCIPconsGetName(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  SCIP_CONS *arg1 = (SCIP_CONS *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_CONS **)&jarg1; 
  result = (char *)SCIPconsGetName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetDualSolVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned int *arg4 = (unsigned int *) 0 ;
  SCIP_RETCODE result;

  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1;
  arg2 = *(SCIP_CONS **)&jarg2;
  arg3 = *(double **)&jarg3;
  arg4 = *(unsigned int **)&jarg4;
  result = (SCIP_RETCODE)SCIPgetDualSolVal(arg1,arg2,arg3,arg4);
  jresult = (jint)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetDualsolLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1;
  arg2 = *(SCIP_CONS **)&jarg2;
  result = (double)SCIPgetDualsolLinear(arg1,arg2);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_jscip_SCIPJNIJNI_SCIPgetDualfarkasLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jdouble jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1;
  arg2 = *(SCIP_CONS **)&jarg2;
  result = (double)SCIPgetDualfarkasLinear(arg1,arg2);
  jresult = (jdouble)result;
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1bufferedoutput_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  result = (unsigned int)(unsigned int) ((arg1)->scip_bufferedoutput_);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_new_1ObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned int arg1 ;
  scip::ObjMessagehdlr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned int)jarg1; 
  result = (scip::ObjMessagehdlr *)new SwigDirector_ObjMessagehdlr(jenv,arg1);
  *(scip::ObjMessagehdlr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_delete_1ObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1error(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip_error(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1errorSwigExplicitObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip::ObjMessagehdlr::scip_error(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1warning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip_warning(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1warningSwigExplicitObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip::ObjMessagehdlr::scip_warning(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1dialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip_dialog(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1dialogSwigExplicitObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip::ObjMessagehdlr::scip_dialog(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip_info(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1infoSwigExplicitObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  FILE *arg3 = (FILE *) 0 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  arg3 = *(FILE **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->scip::ObjMessagehdlr::scip_info(arg2,arg3,(char const *)arg4);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  result = (SCIP_RETCODE)(arg1)->scip_free(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1scip_1freeSwigExplicitObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  result = (SCIP_RETCODE)(arg1)->scip::ObjMessagehdlr::scip_free(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  scip::ObjMessagehdlr *obj = *((scip::ObjMessagehdlr **)&objarg);
  (void)jcls;
  SwigDirector_ObjMessagehdlr *director = static_cast<SwigDirector_ObjMessagehdlr *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_ObjMessagehdlr_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  scip::ObjMessagehdlr *obj = *((scip::ObjMessagehdlr **)&objarg);
  SwigDirector_ObjMessagehdlr *director = dynamic_cast<SwigDirector_ObjMessagehdlr *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP_MESSAGEHDLR *arg1 = (SCIP_MESSAGEHDLR *) 0 ;
  scip::ObjMessagehdlr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_MESSAGEHDLR **)&jarg1; 
  result = (scip::ObjMessagehdlr *)SCIPgetObjMessagehdlr(arg1);
  *(scip::ObjMessagehdlr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIPsetStaticErrorPrintingMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP_MESSAGEHDLR *arg1 = (SCIP_MESSAGEHDLR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP_MESSAGEHDLR **)&jarg1; 
  SCIPsetStaticErrorPrintingMessagehdlr(arg1);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPsetMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_MESSAGEHDLR *arg2 = (SCIP_MESSAGEHDLR *) 0 ;
  SCIP_RETCODE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_MESSAGEHDLR **)&jarg2; 
  result = (SCIP_RETCODE)SCIPsetMessagehdlr(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_SCIPgetMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_MESSAGEHDLR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_MESSAGEHDLR *)SCIPgetMessagehdlr(arg1);
  *(SCIP_MESSAGEHDLR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_SCIPsetMessagehdlrLogfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  SCIPsetMessagehdlrLogfile(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_jscip_SCIPJNIJNI_SCIPgetVerbLevel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VERBLEVEL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  result = (SCIP_VERBLEVEL)SCIPgetVerbLevel(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createSCIP(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SCIP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SCIP *)createSCIP();
  *(SCIP **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_freeSCIP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  SCIP *arg1 = (SCIP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  freeSCIP(arg1);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jint jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  SCIP_VARTYPE arg6 ;
  SCIP_VAR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (SCIP_VARTYPE)jarg6; 
  result = (SCIP_VAR *)createVar(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_VAR **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_releaseVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  releaseVar(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprAbs(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprEntropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprEntropy(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprExp(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprExp(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprLog(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprPow(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  double arg3 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (SCIP_EXPR *)createExprPow(arg1,arg2,arg3);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprSignpower(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  double arg3 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  arg3 = (double)jarg3; 
  result = (SCIP_EXPR *)createExprSignpower(arg1,arg2,arg3);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int arg2 ;
  SCIP_EXPR **arg3 = (SCIP_EXPR **) 0 ;
  double arg4 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_EXPR ***)&jarg3; 
  arg4 = (double)jarg4; 
  result = (SCIP_EXPR *)createExprProduct(arg1,arg2,arg3,arg4);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jlong jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  int arg2 ;
  SCIP_EXPR **arg3 = (SCIP_EXPR **) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(SCIP_EXPR ***)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  result = (SCIP_EXPR *)createExprSum(arg1,arg2,arg3,arg4,arg5);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprSin(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprSin(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprCos(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  result = (SCIP_EXPR *)createExprCos(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  double arg2 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (SCIP_EXPR *)createExprValue(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createExprVar(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_VAR *arg2 = (SCIP_VAR *) 0 ;
  SCIP_EXPR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_VAR **)&jarg2; 
  result = (SCIP_EXPR *)createExprVar(arg1,arg2);
  *(SCIP_EXPR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_releaseExpr(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_EXPR *arg2 = (SCIP_EXPR *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_EXPR **)&jarg2; 
  releaseExpr(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicLinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (SCIP_CONS *)createConsBasicLinear(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicQuadratic(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jint jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jdouble jarg10, jdouble jarg11) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  SCIP_VAR **arg7 = (SCIP_VAR **) 0 ;
  SCIP_VAR **arg8 = (SCIP_VAR **) 0 ;
  double *arg9 = (double *) 0 ;
  double arg10 ;
  double arg11 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = *(SCIP_VAR ***)&jarg7; 
  arg8 = *(SCIP_VAR ***)&jarg8; 
  arg9 = *(double **)&jarg9; 
  arg10 = (double)jarg10; 
  arg11 = (double)jarg11; 
  result = (SCIP_CONS *)createConsBasicQuadratic(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicNonlinear(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_EXPR *arg3 = (SCIP_EXPR *) 0 ;
  double arg4 ;
  double arg5 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_EXPR **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (SCIP_CONS *)createConsBasicNonlinear(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSuperindicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_CONS *arg4 = (SCIP_CONS *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_CONS **)&jarg4; 
  result = (SCIP_CONS *)createConsBasicSuperindicator(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicPseudoboolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6, jint jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jdouble jarg11, jlong jarg12, jlong jarg13, jdouble jarg14, jdouble jarg15) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR **arg3 = (SCIP_VAR **) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  SCIP_VAR ***arg6 = (SCIP_VAR ***) 0 ;
  int arg7 ;
  int *arg8 = (int *) 0 ;
  double *arg9 = (double *) 0 ;
  SCIP_VAR *arg10 = (SCIP_VAR *) 0 ;
  double arg11 ;
  unsigned int arg12 ;
  SCIP_VAR *arg13 = (SCIP_VAR *) 0 ;
  double arg14 ;
  double arg15 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR ***)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(SCIP_VAR ****)&jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = *(double **)&jarg9; 
  arg10 = *(SCIP_VAR **)&jarg10; 
  arg11 = (double)jarg11; 
  arg12 = (unsigned int)jarg12; 
  arg13 = *(SCIP_VAR **)&jarg13; 
  arg14 = (double)jarg14; 
  arg15 = (double)jarg15; 
  result = (SCIP_CONS *)createConsBasicPseudoboolean(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSetpart(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  result = (SCIP_CONS *)createConsBasicSetpart(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSetpack(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  result = (SCIP_CONS *)createConsBasicSetpack(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSetcover(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  result = (SCIP_CONS *)createConsBasicSetcover(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSOC(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jdouble jarg7, jlong jarg8, jdouble jarg9, jdouble jarg10) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  SCIP_VAR *arg8 = (SCIP_VAR *) 0 ;
  double arg9 ;
  double arg10 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = (double)jarg7; 
  arg8 = *(SCIP_VAR **)&jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (double)jarg10; 
  result = (SCIP_CONS *)createConsBasicSOC(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSignpower(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_VAR *arg4 = (SCIP_VAR *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_VAR **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  result = (SCIP_CONS *)createConsBasicSignpower(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicAnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  int arg4 ;
  SCIP_VAR **arg5 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(SCIP_VAR ***)&jarg5; 
  result = (SCIP_CONS *)createConsBasicAnd(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicOr(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  int arg4 ;
  SCIP_VAR **arg5 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(SCIP_VAR ***)&jarg5; 
  result = (SCIP_CONS *)createConsBasicOr(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicBounddisjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_BOUNDTYPE *arg5 = (SCIP_BOUNDTYPE *) 0 ;
  double *arg6 = (double *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(SCIP_BOUNDTYPE **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (SCIP_CONS *)createConsBasicBounddisjunction(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicBounddisjunctionRedundant(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_BOUNDTYPE *arg5 = (SCIP_BOUNDTYPE *) 0 ;
  double *arg6 = (double *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(SCIP_BOUNDTYPE **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  result = (SCIP_CONS *)createConsBasicBounddisjunctionRedundant(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicCardinality(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  int arg5 ;
  SCIP_VAR **arg6 = (SCIP_VAR **) 0 ;
  double *arg7 = (double *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(SCIP_VAR ***)&jarg6; 
  arg7 = *(double **)&jarg7; 
  result = (SCIP_CONS *)createConsBasicCardinality(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicConjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_CONS **arg4 = (SCIP_CONS **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_CONS ***)&jarg4; 
  result = (SCIP_CONS *)createConsBasicConjunction(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicDisjunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_CONS **arg4 = (SCIP_CONS **) 0 ;
  SCIP_CONS *arg5 = (SCIP_CONS *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_CONS ***)&jarg4; 
  arg5 = *(SCIP_CONS **)&jarg5; 
  result = (SCIP_CONS *)createConsBasicDisjunction(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = (int)jarg7; 
  result = (SCIP_CONS *)createConsBasicCumulative(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicIndicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5, jlong jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  int arg4 ;
  SCIP_VAR **arg5 = (SCIP_VAR **) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(SCIP_VAR ***)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = (double)jarg7; 
  result = (SCIP_CONS *)createConsBasicIndicator(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicIndicatorLinCons(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_CONS *arg4 = (SCIP_CONS *) 0 ;
  SCIP_VAR *arg5 = (SCIP_VAR *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_CONS **)&jarg4; 
  arg5 = *(SCIP_VAR **)&jarg5; 
  result = (SCIP_CONS *)createConsBasicIndicatorLinCons(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicKnapsack(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  long long *arg5 = (long long *) 0 ;
  long long arg6 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(long long **)&jarg5; 
  arg6 = (long long)jarg6; 
  result = (SCIP_CONS *)createConsBasicKnapsack(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicLinking(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (int)jarg6; 
  result = (SCIP_CONS *)createConsBasicLinking(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicLogicor(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  result = (SCIP_CONS *)createConsBasicLogicor(arg1,(char const *)arg2,arg3,arg4);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicOrbisack(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR **arg3 = (SCIP_VAR **) 0 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  int arg5 ;
  unsigned int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR ***)&jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  result = (SCIP_CONS *)createConsBasicOrbisack(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicOrbitope(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jint jarg5, jint jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR ***arg3 = (SCIP_VAR ***) 0 ;
  SCIP_ORBITOPETYPE arg4 ;
  int arg5 ;
  int arg6 ;
  unsigned int arg7 ;
  unsigned int arg8 ;
  unsigned int arg9 ;
  unsigned int arg10 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR ****)&jarg3; 
  arg4 = (SCIP_ORBITOPETYPE)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = (unsigned int)jarg8; 
  arg9 = (unsigned int)jarg9; 
  arg10 = (unsigned int)jarg10; 
  result = (SCIP_CONS *)createConsBasicOrbitope(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSOS1(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (SCIP_CONS *)createConsBasicSOS1(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSOS2(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  double *arg5 = (double *) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = *(double **)&jarg5; 
  result = (SCIP_CONS *)createConsBasicSOS2(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicSymresack(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  SCIP_VAR **arg4 = (SCIP_VAR **) 0 ;
  int arg5 ;
  unsigned int arg6 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3; 
  arg4 = *(SCIP_VAR ***)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (unsigned int)jarg6; 
  result = (SCIP_CONS *)createConsBasicSymresack(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicVarbound(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  SCIP_VAR *arg3 = (SCIP_VAR *) 0 ;
  SCIP_VAR *arg4 = (SCIP_VAR *) 0 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(SCIP_VAR **)&jarg3; 
  arg4 = *(SCIP_VAR **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  result = (SCIP_CONS *)createConsBasicVarbound(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createConsBasicXor(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  SCIP *arg1 = (SCIP *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  int arg4 ;
  SCIP_VAR **arg5 = (SCIP_VAR **) 0 ;
  SCIP_CONS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (unsigned int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(SCIP_VAR ***)&jarg5; 
  result = (SCIP_CONS *)createConsBasicXor(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(SCIP_CONS **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_releaseCons(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  SCIP *arg1 = (SCIP *) 0 ;
  SCIP_CONS *arg2 = (SCIP_CONS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(SCIP **)&jarg1; 
  arg2 = *(SCIP_CONS **)&jarg2; 
  releaseCons(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_jscip_SCIPJNIJNI_createObjMessagehdlr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  scip::ObjMessagehdlr *arg1 = (scip::ObjMessagehdlr *) 0 ;
  unsigned int arg2 ;
  SCIP_MESSAGEHDLR *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(scip::ObjMessagehdlr **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (SCIP_MESSAGEHDLR *)createObjMessagehdlr(arg1,arg2);
  *(SCIP_MESSAGEHDLR **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_jscip_SCIPJNIJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[5] = {
    {
      "SwigDirector_ObjMessagehdlr_scip_error", "(Ljscip/ObjMessagehdlr;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ObjMessagehdlr_scip_warning", "(Ljscip/ObjMessagehdlr;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ObjMessagehdlr_scip_dialog", "(Ljscip/ObjMessagehdlr;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ObjMessagehdlr_scip_info", "(Ljscip/ObjMessagehdlr;JJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ObjMessagehdlr_scip_free", "(Ljscip/ObjMessagehdlr;J)I" 
    }
  };
  Swig::jclass_SCIPJNIJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_SCIPJNIJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

